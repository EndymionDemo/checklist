import { Color, Action, Entity, MessageIncoming as IncomingMessage } from "../endymion/endymion-v2.types";
import { EndymionCore } from "../endymion/endymion-core-v2";
import { Subject } from "rxjs";
import { Win } from "../utils/nav-utils";
type enEvent = {
    name: string;
    type: string;
    payload: any;
};
export declare class BaseEntity {
    protected commInterface: string;
    protected w: Window;
    protected win: Win;
    private isCreated;
    private updated;
    private colorUpdated;
    private positionUpdated;
    private rotationUpdated;
    private scaleUpdated;
    private created;
    private applyed;
    private applyError;
    private error;
    private createdError;
    private setAimableUpdated;
    private message;
    private aimed;
    private clicked;
    private webViewVisible;
    private isClickable;
    private hapticPlay;
    private destroyed;
    private actionResult;
    protected customId: number;
    isCustomId: boolean;
    get id(): number;
    protected entity: Entity;
    protected color: Color;
    protected core: EndymionCore;
    private _actions;
    protected get actions(): any[];
    protected set actions(actions: any[]);
    protected clickable: boolean;
    protected active: boolean;
    protected aimable: boolean;
    protected playHaptic: boolean;
    updated$: import("rxjs").Observable<enEvent>;
    colorUpdated$: import("rxjs").Observable<Color>;
    positionUpdated$: import("rxjs").Observable<{
        x: number;
        y: number;
        z: number;
    }>;
    rotationUpdated$: import("rxjs").Observable<{
        x: number;
        y: number;
        z: number;
    }>;
    scaleUpdated$: import("rxjs").Observable<{
        x: number;
        y: number;
        z: number;
    }>;
    setAimableUpdated$: import("rxjs").Observable<{
        enabled: boolean;
        radius: number;
    }>;
    setActiveUpdated: Subject<boolean>;
    setActiveUpdated$: import("rxjs").Observable<boolean>;
    created$: import("rxjs").Observable<Action[]>;
    applyed$: import("rxjs").Observable<Action[]>;
    applyError$: import("rxjs").Observable<any>;
    createdError$: import("rxjs").Observable<any>;
    error$: import("rxjs").Observable<any>;
    aimed$: import("rxjs").Observable<IncomingMessage>;
    clicked$: import("rxjs").Observable<IncomingMessage>;
    webViewVisible$: import("rxjs").Observable<IncomingMessage>;
    isClickable$: import("rxjs").Observable<boolean>;
    hapticPlay$: import("rxjs").Observable<boolean>;
    destroyed$: import("rxjs").Observable<boolean>;
    actionResult$: import("rxjs").Observable<any>;
    message$: import("rxjs").Observable<IncomingMessage>;
    constructor(commInterface?: string, w?: Window);
    create(): void;
    apply(): void;
    destroy(): void;
    setId(id: number): BaseEntity;
    setPos(x: number, y: number, z: number): BaseEntity;
    addPos(x: number, y: number, z: number): BaseEntity;
    setRot(x: number, y: number, z: number): BaseEntity;
    addRot(x: number, y: number, z: number): BaseEntity;
    setScale(x: number, y: number, z: number): BaseEntity;
    addScale(x: number, y: number, z: number): BaseEntity;
    setColor(color: Color | string): BaseEntity;
    setOpacity(value: number): BaseEntity;
    setAimable(value: boolean, radius?: number): BaseEntity;
    setActive(value: boolean): BaseEntity;
    setClickable(value: boolean): BaseEntity;
    setHapticFeedback(value: boolean): BaseEntity;
}
export {};
